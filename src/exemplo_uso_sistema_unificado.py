# Databricks notebook source
# MAGIC %md
# MAGIC # Exemplo de Uso do Sistema Unificado de Matriz de Merecimento
# MAGIC
# MAGIC Este notebook demonstra como usar o sistema unificado para calcular a matriz de merecimento
# MAGIC para diferentes categorias de produtos.

# COMMAND ----------

# MAGIC %md
# MAGIC ## 1. Importa√ß√£o do Sistema Unificado

# COMMAND ----------

# Importa o sistema unificado
from calculo_matriz_de_merecimento_unificado import (
    executar_calculo_matriz_merecimento,
    validar_resultados,
    REGRAS_AGRUPAMENTO,
    JANELAS_MOVEIS
)

# COMMAND ----------

# MAGIC %md
# MAGIC ## 2. Verifica√ß√£o das Categorias Suportadas

# COMMAND ----------

print("üè¢ CATEGORIAS SUPORTADAS PELO SISTEMA:")
print("=" * 60)

for categoria, config in REGRAS_AGRUPAMENTO.items():
    print(f"üìã {categoria}")
    print(f"   ‚Ä¢ Coluna de agrupamento: {config['coluna_grupo_necessidade']}")
    print(f"   ‚Ä¢ Tipo de agrupamento: {config['tipo_agrupamento']}")
    print(f"   ‚Ä¢ Descri√ß√£o: {config['descricao']}")
    print()

print(f"üìä Janelas m√≥veis dispon√≠veis: {JANELAS_MOVEIS} dias")
print(f"üéØ Percentual de corte para m√©dias aparadas: 10%")

# COMMAND ----------

# MAGIC %md
# MAGIC ## 2.1 Como Funciona o Sistema de Agrupamento
# MAGIC
# MAGIC O sistema usa uma abstra√ß√£o inteligente chamada `grupo_de_necessidade` que se adapta automaticamente:
# MAGIC
# MAGIC **Exemplo 1 - DIRETORIA DE TELAS:**
# MAGIC - **Coluna origem**: `gemeos`
# MAGIC - **Valores copiados**: Todos os valores √∫nicos da coluna `gemeos` (ex: "GRUPO_A", "GRUPO_B", "GRUPO_C")
# MAGIC - **Resultado**: `grupo_de_necessidade` cont√©m os valores reais de `gemeos`
# MAGIC
# MAGIC **Exemplo 2 - DIRETORIA LINHA BRANCA:**
# MAGIC - **Coluna origem**: `NmEspecieGerencial`
# MAGIC - **Valores copiados**: Todos os valores √∫nicos da coluna `NmEspecieGerencial` (ex: "GELADEIRA", "FOG√ÉO", "LAVADORA")
# MAGIC - **Resultado**: `grupo_de_necessidade` cont√©m os valores reais de `NmEspecieGerencial`
# MAGIC
# MAGIC **Resumo**: `grupo_de_necessidade` = c√≥pia dos valores da coluna especificada para cada categoria

# COMMAND ----------

# MAGIC %md
# MAGIC ## 2.2 Configura√ß√£o de Par√¢metros Sigma para Outliers
# MAGIC
# MAGIC O sistema permite configurar diferentes n√≠veis de sensibilidade para detec√ß√£o de outliers:
# MAGIC
# MAGIC **Par√¢metros Configur√°veis**:
# MAGIC - **sigma_meses_atipicos**: Sensibilidade para meses at√≠picos (padr√£o: 3.0œÉ)
# MAGIC - **sigma_outliers_cd**: Sensibilidade para outliers a n√≠vel CD (padr√£o: 3.0œÉ)
# MAGIC - **sigma_outliers_loja**: Sensibilidade para outliers a n√≠vel loja (padr√£o: 3.0œÉ)
# MAGIC - **sigma_atacado_cd**: Sensibilidade para outliers CD em lojas de atacado (padr√£o: 1.5œÉ)
# MAGIC - **sigma_atacado_loja**: Sensibilidade para outliers loja em lojas de atacado (padr√£o: 1.5œÉ)
# MAGIC
# MAGIC **Guia de Sensibilidade**:
# MAGIC - **1.0œÉ - 2.0œÉ**: Muito restritivo (detecta muitos outliers)
# MAGIC - **2.0œÉ - 3.0œÉ**: Restritivo (detec√ß√£o equilibrada)
# MAGIC - **3.0œÉ - 4.0œÉ**: Moderado (menos sens√≠vel)
# MAGIC - **4.0œÉ+**: Muito permissivo (poucos outliers detectados)

# COMMAND ----------

# Exemplos de configura√ß√µes de sigma para diferentes cen√°rios
print("üîß EXEMPLOS DE CONFIGURA√á√ïES DE SIGMA:")
print("=" * 60)

print("üìä CONFIGURA√á√ÉO PADR√ÉO (3.0œÉ):")
print("   ‚Ä¢ sigma_meses_atipicos: 3.0")
print("   ‚Ä¢ sigma_outliers_cd: 3.0")
print("   ‚Ä¢ sigma_outliers_loja: 3.0")
print("   ‚Ä¢ sigma_atacado_cd: 1.5")
print("   ‚Ä¢ sigma_atacado_loja: 1.5")

print("\nüéØ CONFIGURA√á√ÉO RESTRITIVA (2.0œÉ):")
print("   ‚Ä¢ sigma_meses_atipicos: 2.0")
print("   ‚Ä¢ sigma_outliers_cd: 2.0")
print("   ‚Ä¢ sigma_outliers_loja: 2.0")
print("   ‚Ä¢ sigma_atacado_cd: 1.0")
print("   ‚Ä¢ sigma_atacado_loja: 1.0")

print("\nüîç CONFIGURA√á√ÉO PERMISSIVA (4.0œÉ):")
print("   ‚Ä¢ sigma_meses_atipicos: 4.0")
print("   ‚Ä¢ sigma_outliers_cd: 4.0")
print("   ‚Ä¢ sigma_outliers_loja: 4.0")
print("   ‚Ä¢ sigma_atacado_cd: 2.0")
print("   ‚Ä¢ sigma_atacado_loja: 2.0")

# COMMAND ----------

# MAGIC %md
# MAGIC ## 3. Exemplo para DIRETORIA DE TELAS

# COMMAND ----------

# MAGIC %md
# MAGIC ### Execu√ß√£o para TELAS
# MAGIC 
# MAGIC Esta categoria usa `gemeos` como grupo de necessidade.

# COMMAND ----------

print("üñ•Ô∏è  EXECUTANDO PARA DIRETORIA DE TELAS")
print("=" * 50)

# Executa o c√°lculo para TELAS com par√¢metros sigma padr√£o
df_telas = executar_calculo_matriz_merecimento("DIRETORIA DE TELAS")

# Exemplo com par√¢metros sigma personalizados para TELAS
df_telas_personalizado = executar_calculo_matriz_merecimento(
    "DIRETORIA DE TELAS",
    sigma_meses_atipicos=2.5,      # Mais sens√≠vel a meses at√≠picos
    sigma_outliers_cd=2.8,         # Sensibilidade intermedi√°ria para CD
    sigma_outliers_loja=3.2,       # Menos sens√≠vel para lojas
    sigma_atacado_cd=1.2,          # Mais restritivo para atacado CD
    sigma_atacado_loja=1.8         # Menos restritivo para atacado loja
)

# Valida os resultados
validar_resultados(df_telas, "DIRETORIA DE TELAS")

# Exibe amostra dos resultados
print("\nüìä AMOSTRA DOS RESULTADOS (TELAS):")
display(df_telas.limit(10))

# COMMAND ----------

# MAGIC %md
# MAGIC ## 4. Exemplo para DIRETORIA TELEFONIA CELULAR

# MAGIC %md
# MAGIC ### Execu√ß√£o para TELEFONIA
# MAGIC 
# MAGIC Esta categoria tamb√©m usa `gemeos` como grupo de necessidade.

# COMMAND ----------

print("üì± EXECUTANDO PARA DIRETORIA TELEFONIA CELULAR")
print("=" * 50)

# Executa o c√°lculo para TELEFONIA com par√¢metros sigma padr√£o
df_telefonia = executar_calculo_matriz_merecimento("DIRETORIA TELEFONIA CELULAR")

# Exemplo com par√¢metros sigma personalizados para TELEFONIA
df_telefonia_personalizado = executar_calculo_matriz_merecimento(
    "DIRETORIA TELEFONIA CELULAR",
    sigma_meses_atipicos=3.5,      # Menos sens√≠vel a meses at√≠picos
    sigma_outliers_cd=3.0,         # Padr√£o para CD
    sigma_outliers_loja=2.5,       # Mais sens√≠vel para lojas
    sigma_atacado_cd=1.0,          # Muito restritivo para atacado CD
    sigma_atacado_loja=1.3         # Restritivo para atacado loja
)

# Valida os resultados
validar_resultados(df_telefonia, "DIRETORIA TELEFONIA CELULAR")

# Exibe amostra dos resultados
print("\nüìä AMOSTRA DOS RESULTADOS (TELEFONIA):")
display(df_telefonia.limit(10))

# COMMAND ----------

# MAGIC %md
# MAGIC ## 5. Exemplo para DIRETORIA LINHA BRANCA

# MAGIC %md
# MAGIC ### Execu√ß√£o para LINHA BRANCA
# MAGIC 
# MAGIC Esta categoria usa `NmEspecieGerencial` como grupo de necessidade.

# COMMAND ----------

print("üè† EXECUTANDO PARA DIRETORIA LINHA BRANCA")
print("=" * 50)

# Executa o c√°lculo para LINHA BRANCA com par√¢metros sigma padr√£o
df_linha_branca = executar_calculo_matriz_merecimento("DIRETORIA LINHA BRANCA")

# Exemplo com par√¢metros sigma personalizados para LINHA BRANCA
df_linha_branca_personalizado = executar_calculo_matriz_merecimento(
    "DIRETORIA LINHA BRANCA",
    sigma_meses_atipicos=2.0,      # Muito sens√≠vel a meses at√≠picos
    sigma_outliers_cd=2.5,         # Sens√≠vel para CD
    sigma_outliers_loja=2.8,       # Sens√≠vel para lojas
    sigma_atacado_cd=1.5,          # Padr√£o para atacado CD
    sigma_atacado_loja=1.5         # Padr√£o para atacado loja
)

# Valida os resultados
validar_resultados(df_linha_branca, "DIRETORIA LINHA BRANCA")

# Exibe amostra dos resultados
print("\nüìä AMOSTRA DOS RESULTADOS (LINHA BRANCA):")
display(df_linha_branca.limit(10))

# COMMAND ----------

# MAGIC %md
# MAGIC ## 6. Compara√ß√£o entre Categorias

# COMMAND ----------

# MAGIC %md
# MAGIC ### An√°lise Comparativa
# MAGIC 
# MAGIC Vamos comparar os resultados entre as diferentes categorias para entender
# MAGIC como o sistema se comporta com diferentes regras de agrupamento.

# COMMAND ----------

def comparar_categorias(lista_dataframes, lista_categorias):
    """
    Compara os resultados entre diferentes categorias.
    
    Args:
        lista_dataframes: Lista de DataFrames com resultados
        lista_categorias: Lista de nomes das categorias
    """
    print("üìä COMPARA√á√ÉO ENTRE CATEGORIAS")
    print("=" * 60)
    
    for i, (df, categoria) in enumerate(zip(lista_dataframes, lista_categorias)):
        print(f"\nüîç {categoria}:")
        print(f"   ‚Ä¢ Total de registros: {df.count():,}")
        print(f"   ‚Ä¢ SKUs √∫nicos: {df.select('CdSku').distinct().count():,}")
        print(f"   ‚Ä¢ Lojas √∫nicas: {df.select('CdFilial').distinct().count():,}")
        print(f"   ‚Ä¢ Grupos de necessidade: {df.select('grupo_de_necessidade').distinct().count():,}")
        
        # Verifica se tem colunas de g√™meos
        if 'gemeos' in df.columns:
            gemeos_unicos = df.select('gemeos').distinct().count()
            print(f"   ‚Ä¢ G√™meos √∫nicos: {gemeos_unicos:,}")
        
        # Verifica se tem colunas de esp√©cie gerencial
        if 'NmEspecieGerencial' in df.columns:
            especies_unicas = df.select('NmEspecieGerencial').distinct().count()
            print(f"   ‚Ä¢ Esp√©cies gerenciais √∫nicas: {especies_unicas:,}")

# Lista de DataFrames e categorias para compara√ß√£o
dataframes = [df_telas, df_telefonia, df_linha_branca]
categorias = ["DIRETORIA DE TELAS", "DIRETORIA TELEFONIA CELULAR", "DIRETORIA LINHA BRANCA"]

# Executa a compara√ß√£o
comparar_categorias(dataframes, categorias)

# COMMAND ----------

# MAGIC %md
# MAGIC ## 7. An√°lise das M√©dias Aparadas

# MAGIC %md
# MAGIC ### Verifica√ß√£o das M√©dias Aparadas
# MAGIC 
# MAGIC Vamos analisar como as m√©dias aparadas se comportam em compara√ß√£o
# MAGIC com as m√©dias normais e medianas.

# COMMAND ----------

def analisar_medias_aparadas(df: DataFrame, categoria: str):
    """
    Analisa o comportamento das m√©dias aparadas.
    
    Args:
        df: DataFrame com os resultados
        categoria: Nome da categoria
    """
    print(f"üìà AN√ÅLISE DAS M√âDIAS APARADAS - {categoria}")
    print("=" * 60)
    
    # Seleciona apenas registros com valores v√°lidos para an√°lise
    df_analise = df.filter(
        (F.col("Media90_Qt_venda_sem_ruptura") > 0) &
        (F.col("Mediana90_Qt_venda_sem_ruptura") > 0) &
        (F.col("MediaAparada90_Qt_venda_sem_ruptura") > 0)
    )
    
    if df_analise.count() > 0:
        # Calcula estat√≠sticas para cada tipo de m√©dia
        stats = df_analise.select([
            F.avg("Media90_Qt_venda_sem_ruptura").alias("media_aritmetica_90"),
            F.avg("Mediana90_Qt_venda_sem_ruptura").alias("mediana_90"),
            F.avg("MediaAparada90_Qt_venda_sem_ruptura").alias("media_aparada_90"),
            F.stddev("Media90_Qt_venda_sem_ruptura").alias("std_aritmetica_90"),
            F.stddev("Mediana90_Qt_venda_sem_ruptura").alias("std_mediana_90"),
            F.stddev("MediaAparada90_Qt_venda_sem_ruptura").alias("std_aparada_90")
        ]).collect()[0]
        
        print("üìä Estat√≠sticas para janela de 90 dias:")
        print(f"   ‚Ä¢ M√©dia aritm√©tica: {stats['media_aritmetica_90']:.2f} ¬± {stats['std_aritmetica_90']:.2f}")
        print(f"   ‚Ä¢ Mediana: {stats['mediana_90']:.2f} ¬± {stats['std_mediana_90']:.2f}")
        print(f"   ‚Ä¢ M√©dia aparada: {stats['media_aparada_90']:.2f} ¬± {stats['std_aparada_90']:.2f}")
        
        # Calcula correla√ß√µes
        correlacoes = df_analise.select([
            F.corr("Media90_Qt_venda_sem_ruptura", "MediaAparada90_Qt_venda_sem_ruptura").alias("corr_aritmetica_aparada"),
            F.corr("Mediana90_Qt_venda_sem_ruptura", "MediaAparada90_Qt_venda_sem_ruptura").alias("corr_mediana_aparada")
        ]).collect()[0]
        
        print(f"\nüîó Correla√ß√µes:")
        print(f"   ‚Ä¢ Aritm√©tica vs Aparada: {correlacoes['corr_aritmetica_aparada']:.3f}")
        print(f"   ‚Ä¢ Mediana vs Aparada: {correlacoes['corr_mediana_aparada']:.3f}")
        
    else:
        print("‚ö†Ô∏è  N√£o h√° dados suficientes para an√°lise das m√©dias aparadas")

# Analisa as m√©dias aparadas para cada categoria
for df, categoria in zip(dataframes, categorias):
    analisar_medias_aparadas(df, categoria)
    print()

# COMMAND ----------

# MAGIC %md
# MAGIC ## 8. Exporta√ß√£o dos Resultados

# MAGIC %md
# MAGIC ### Salvando os Resultados
# MAGIC 
# MAGIC Vamos salvar os resultados para uso posterior.

# COMMAND ----------

def salvar_resultados(df: DataFrame, categoria: str, formato: str = "delta"):
    """
    Salva os resultados em diferentes formatos.
    
    Args:
        df: DataFrame com os resultados
        categoria: Nome da categoria
        formato: Formato de sa√≠da (delta, parquet, csv)
    """
    print(f"üíæ Salvando resultados para: {categoria}")
    
    # Normaliza o nome da categoria para uso em nomes de arquivo
    nome_arquivo = categoria.replace(" ", "_").replace("/", "_").lower()
    
    if formato == "delta":
        # Salva como tabela Delta
        df.write.mode("overwrite").format("delta").save(f"/tmp/matriz_merecimento_{nome_arquivo}")
        print(f"‚úÖ Resultados salvos em Delta: /tmp/matriz_merecimento_{nome_arquivo}")
        
    elif formato == "parquet":
        # Salva como arquivo Parquet
        df.write.mode("overwrite").parquet(f"/tmp/matriz_merecimento_{nome_arquivo}.parquet")
        print(f"‚úÖ Resultados salvos em Parquet: /tmp/matriz_merecimento_{nome_arquivo}.parquet")
        
    elif formato == "csv":
        # Salva como CSV (apenas para amostras pequenas)
        if df.count() <= 100000:  # Limite para CSV
            df.toPandas().to_csv(f"/tmp/matriz_merecimento_{nome_arquivo}.csv", index=False)
            print(f"‚úÖ Resultados salvos em CSV: /tmp/matriz_merecimento_{nome_arquivo}.csv")
        else:
            print("‚ö†Ô∏è  Dataset muito grande para CSV. Use Delta ou Parquet.")

# Salva os resultados em formato Delta
for df, categoria in zip(dataframes, categorias):
    salvar_resultados(df, categoria, "delta")

# COMMAND ----------

# MAGIC %md
# MAGIC ## 9. Resumo Final

# COMMAND ----------

print("üéØ RESUMO DA EXECU√á√ÉO")
print("=" * 60)
print("‚úÖ Sistema unificado de matriz de merecimento executado com sucesso!")
print()
print("üìä Categorias processadas:")
for categoria in categorias:
    print(f"   ‚Ä¢ {categoria}")
print()
print("üîß Funcionalidades implementadas:")
print("   ‚Ä¢ Abstra√ß√£o grupo_de_necessidade com regras espec√≠ficas por categoria")
print("   ‚Ä¢ M√©dias m√≥veis normais (90, 180, 270, 360 dias)")
print("   ‚Ä¢ Medianas m√≥veis (90, 180, 270, 360 dias)")
print("   ‚Ä¢ M√©dias m√≥veis aparadas (90, 180, 270, 360 dias)")
print("   ‚Ä¢ Detec√ß√£o autom√°tica de outliers e meses at√≠picos")
print("   ‚Ä¢ Filtragem inteligente por grupo de necessidade")
print()
print("üí° Pr√≥ximos passos:")
print("   ‚Ä¢ Ajustar par√¢metros de outliers conforme necess√°rio")
print("   ‚Ä¢ Implementar valida√ß√µes adicionais de neg√≥cio")
print("   ‚Ä¢ Criar dashboards de monitoramento")
print("   ‚Ä¢ Automatizar execu√ß√£o via DAGs")
