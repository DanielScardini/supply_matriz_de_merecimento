# Databricks notebook source
# MAGIC %md
# MAGIC # Exemplo de Uso das M√©tricas da Matriz de Merecimento
# MAGIC
# MAGIC Este notebook demonstra como usar as fun√ß√µes de m√©tricas para avaliar a qualidade
# MAGIC das aloca√ß√µes da matriz de merecimento, comparando valores previstos vs. reais.
# MAGIC
# MAGIC **Objetivo**: Demonstrar o uso pr√°tico das fun√ß√µes de m√©tricas implementadas
# MAGIC **Escopo**: Exemplos com dados simulados e reais da matriz de merecimento

# COMMAND ----------

# MAGIC %md
# MAGIC ## 1. Imports e Configura√ß√µes Iniciais

# COMMAND ----------

from pyspark.sql import SparkSession, DataFrame
from pyspark.sql import functions as F, Window
from datetime import datetime, timedelta
import pandas as pd
from typing import List, Optional

# Inicializa√ß√£o do Spark
spark = SparkSession.builder.appName("exemplo_uso_metricas").getOrCreate()

# COMMAND ----------

# MAGIC %md
# MAGIC ## 2. Importa√ß√£o das Fun√ß√µes de M√©tricas
# MAGIC
# MAGIC Importamos as fun√ß√µes de m√©tricas para avalia√ß√£o da matriz de merecimento.

# COMMAND ----------

# Importa√ß√£o das fun√ß√µes de m√©tricas
from metricas_matriz_merecimento import (
    add_allocation_metrics,
    calculate_line_metrics,
    validate_metrics_data,
    generate_metrics_summary,
    compare_metrics_periods
)

print("‚úÖ Fun√ß√µes de m√©tricas importadas com sucesso!")

# COMMAND ----------

# MAGIC %md
# MAGIC ## 3. Cria√ß√£o de Dados Simulados para Demonstra√ß√£o
# MAGIC
# MAGIC Criamos dados simulados para demonstrar o uso das fun√ß√µes de m√©tricas.

# COMMAND ----------

# Dados simulados para demonstra√ß√£o
dados_simulados = [
    # CdFilial, Cd_primario, gemeos, demanda_real, demanda_prevista
    (1, "CD_A", "GEMEO_1", 100.0, 95.0),
    (2, "CD_A", "GEMEO_1", 80.0, 85.0),
    (3, "CD_A", "GEMEO_1", 120.0, 110.0),
    (4, "CD_B", "GEMEO_1", 90.0, 100.0),
    (5, "CD_B", "GEMEO_1", 110.0, 105.0),
    (6, "CD_B", "GEMEO_1", 95.0, 90.0),
    (1, "CD_A", "GEMEO_2", 150.0, 140.0),
    (2, "CD_A", "GEMEO_2", 130.0, 135.0),
    (3, "CD_A", "GEMEO_2", 160.0, 155.0),
    (4, "CD_B", "GEMEO_2", 140.0, 150.0),
    (5, "CD_B", "GEMEO_2", 170.0, 165.0),
    (6, "CD_B", "GEMEO_2", 125.0, 130.0)
]

# Cria√ß√£o do DataFrame Spark
df_simulado = spark.createDataFrame(
    dados_simulados,
    ["CdFilial", "Cd_primario", "gemeos", "demanda_real", "demanda_prevista"]
)

print("‚úÖ Dados simulados criados:")
print(f"  ‚Ä¢ Total de registros: {df_simulado.count()}")
print(f"  ‚Ä¢ CDs: {df_simulado.select('Cd_primario').distinct().count()}")
print(f"  ‚Ä¢ G√™meos: {df_simulado.select('gemeos').distinct().count()}")
print(f"  ‚Ä¢ Filiais: {df_simulado.select('CdFilial').distinct().count()}")

# Visualiza√ß√£o dos dados
print("\nüìä Dados simulados:")
df_simulado.show()

# COMMAND ----------

# MAGIC %md
# MAGIC ## 4. Valida√ß√£o dos Dados
# MAGIC
# MAGIC Validamos se os dados est√£o em formato adequado para c√°lculo das m√©tricas.

# COMMAND ----------

# Valida√ß√£o dos dados simulados
is_valid, message = validate_metrics_data(
    df_simulado,
    y_col="demanda_real",
    yhat_col="demanda_prevista",
    required_cols=["CdFilial", "Cd_primario", "gemeos"]
)

if is_valid:
    print(f"‚úÖ {message}")
else:
    print(f"‚ùå {message}")

# COMMAND ----------

# MAGIC %md
# MAGIC ## 5. C√°lculo de M√©tricas Agregadas
# MAGIC
# MAGIC Calculamos m√©tricas agregadas para avaliar a qualidade geral das aloca√ß√µes.

# COMMAND ----------

# MAGIC %md
# MAGIC ### 5.1 M√©tricas Agregadas Globais
# MAGIC
# MAGIC Calculamos m√©tricas para todo o conjunto de dados.

# COMMAND ----------

# M√©tricas agregadas globais
df_metrics_global = add_allocation_metrics(
    df=df_simulado,
    y_col="demanda_real",
    yhat_col="demanda_prevista"
)

print("üìä M√âTRICAS AGREGADAS GLOBAIS:")
print("=" * 50)
df_metrics_global.show()

# COMMAND ----------

# MAGIC %md
# MAGIC ### 5.2 M√©tricas Agregadas por CD Prim√°rio
# MAGIC
# MAGIC Calculamos m√©tricas agregadas por centro de distribui√ß√£o.

# COMMAND ----------

# M√©tricas agregadas por CD
df_metrics_por_cd = add_allocation_metrics(
    df=df_simulado,
    y_col="demanda_real",
    yhat_col="demanda_prevista",
    group_cols=["Cd_primario"]
)

print("üìä M√âTRICAS AGREGADAS POR CD:")
print("=" * 50)
df_metrics_por_cd.show()

# COMMAND ----------

# MAGIC %md
# MAGIC ### 5.3 M√©tricas Agregadas por CD e G√™meo
# MAGIC
# MAGIC Calculamos m√©tricas agregadas por combina√ß√£o de CD e g√™meo.

# COMMAND ----------

# M√©tricas agregadas por CD e g√™meo
df_metrics_por_cd_gemeo = add_allocation_metrics(
    df=df_simulado,
    y_col="demanda_real",
    yhat_col="demanda_prevista",
    group_cols=["Cd_primario", "gemeos"]
)

print("üìä M√âTRICAS AGREGADAS POR CD E G√äMEO:")
print("=" * 50)
df_metrics_por_cd_gemeo.show()

# COMMAND ----------

# MAGIC %md
# MAGIC ## 6. C√°lculo de M√©tricas Linha a Linha
# MAGIC
# MAGIC Calculamos m√©tricas detalhadas para cada linha individual.

# COMMAND ----------

# M√©tricas linha a linha
df_metrics_linha = calculate_line_metrics(
    df=df_simulado,
    y_col="demanda_real",
    yhat_col="demanda_prevista",
    group_cols=["Cd_primario", "gemeos"]
)

print("üìä M√âTRICAS LINHA A LINHA:")
print("=" * 50)
df_metrics_linha.show()

# COMMAND ----------

# MAGIC %md
# MAGIC ## 7. Resumo Estat√≠stico das M√©tricas
# MAGIC
# MAGIC Geramos um resumo estat√≠stico das m√©tricas calculadas.

# COMMAND ----------

# MAGIC %md
# MAGIC ### 7.1 Resumo Estat√≠stico Global
# MAGIC
# MAGIC Resumo estat√≠stico para todas as m√©tricas calculadas.

# COMMAND ----------

# Resumo estat√≠stico global
df_resumo_global = generate_metrics_summary(df_metrics_global)

print("üìã RESUMO ESTAT√çSTICO GLOBAL:")
print("=" * 50)
df_resumo_global.show()

# COMMAND ----------

# MAGIC %md
# MAGIC ### 7.2 Resumo Estat√≠stico por CD
# MAGIC
# MAGIC Resumo estat√≠stico das m√©tricas por centro de distribui√ß√£o.

# COMMAND ----------

# Resumo estat√≠stico por CD
df_resumo_por_cd = generate_metrics_summary(
    df_metrics_por_cd,
    group_cols=["Cd_primario"]
)

print("üìã RESUMO ESTAT√çSTICO POR CD:")
print("=" * 50)
df_resumo_por_cd.show()

# COMMAND ----------

# MAGIC %md
# MAGIC ## 8. An√°lise Comparativa entre CDs
# MAGIC
# MAGIC Analisamos a performance comparativa entre diferentes centros de distribui√ß√£o.

# COMMAND ----------

# An√°lise comparativa entre CDs
print("üîç AN√ÅLISE COMPARATIVA ENTRE CDs:")
print("=" * 50)

# Comparar wMAPE entre CDs
df_comparacao_cds = df_metrics_por_cd.select("Cd_primario", "wMAPE_perc", "SE_pp", "Cross_entropy")
df_comparacao_cds.show()

# Ranking dos CDs por performance (menor wMAPE = melhor)
print("\nüèÜ RANKING DOS CDs POR PERFORMANCE (wMAPE):")
df_ranking_cds = df_metrics_por_cd.orderBy("wMAPE_perc").select("Cd_primario", "wMAPE_perc")
df_ranking_cds.show()

# COMMAND ----------

# MAGIC %md
# MAGIC ## 9. An√°lise por G√™meo
# MAGIC
# MAGIC Analisamos a performance por grupo de produtos similares.

# COMMAND ----------

# An√°lise por g√™meo
print("üîç AN√ÅLISE POR G√äMEO:")
print("=" * 50)

# M√©tricas agregadas por g√™meo
df_metrics_por_gemeo = add_allocation_metrics(
    df=df_simulado,
    y_col="demanda_real",
    yhat_col="demanda_prevista",
    group_cols=["gemeos"]
)

df_metrics_por_gemeo.show()

# Ranking dos g√™meos por performance
print("\nüèÜ RANKING DOS G√äMEOS POR PERFORMANCE (wMAPE):")
df_ranking_gemeos = df_metrics_por_gemeo.orderBy("wMAPE_perc").select("gemeos", "wMAPE_perc")
df_ranking_gemeos.show()

# COMMAND ----------

# MAGIC %md
# MAGIC ## 10. Exemplo com Dados Reais da Matriz de Merecimento
# MAGIC
# MAGIC Demonstramos como usar as m√©tricas com dados reais da matriz de merecimento.

# COMMAND ----------

# MAGIC %md
# MAGIC ### 10.1 Carregamento de Dados Reais (Exemplo)
# MAGIC
# MAGIC **Nota**: Este √© um exemplo de como carregar dados reais. 
# MAGIC Os dados reais devem ser carregados conforme implementado no notebook principal.

# COMMAND ----------

# MAGIC %md
# MAGIC ```python
# MAGIC # Exemplo de carregamento de dados reais da matriz de merecimento
# MAGIC 
# MAGIC # 1. Carregar dados da matriz calculada
# MAGIC df_matriz_calculada = spark.table("matriz_merecimento_calculada")
# MAGIC 
# MAGIC # 2. Carregar dados reais de demanda
# MAGIC df_demanda_real = spark.table("dados_demanda_real")
# MAGIC 
# MAGIC # 3. Preparar dados para compara√ß√£o
# MAGIC df_comparacao = (
# MAGIC     df_matriz_calculada
# MAGIC     .join(
# MAGIC         df_demanda_real,
# MAGIC         on=["CdFilial", "Cd_primario", "gemeos"],
# MAGIC         how="inner"
# MAGIC     )
# MAGIC )
# MAGIC 
# MAGIC # 4. Calcular m√©tricas
# MAGIC df_metrics_reais = add_allocation_metrics(
# MAGIC     df=df_comparacao,
# MAGIC     y_col="demanda_real",
# MAGIC     yhat_col="merecimento_calculado",
# MAGIC     group_cols=["Cd_primario", "gemeos"]
# MAGIC )
# MAGIC 
# MAGIC print("‚úÖ M√©tricas calculadas com dados reais!")
# MAGIC ```

# COMMAND ----------

# MAGIC %md
# MAGIC ## 11. Interpreta√ß√£o das M√©tricas
# MAGIC
# MAGIC Explicamos como interpretar cada uma das m√©tricas calculadas.

# COMMAND ----------

print("üìö INTERPRETA√á√ÉO DAS M√âTRICAS:")
print("=" * 50)

print("\nüîç wMAPE (Weighted Mean Absolute Percentage Error):")
print("  ‚Ä¢ Mede o erro percentual absoluto ponderado pelo volume")
print("  ‚Ä¢ Quanto menor, melhor a precis√£o da matriz")
print("  ‚Ä¢ Interpreta√ß√£o: < 10% = Excelente, 10-20% = Bom, > 20% = Precisa melhorar")

print("\nüîç SE (Share Error):")
print("  ‚Ä¢ Mede o erro na distribui√ß√£o de participa√ß√µes entre filiais")
print("  ‚Ä¢ Quanto menor, melhor a distribui√ß√£o")
print("  ‚Ä¢ Interpreta√ß√£o: < 5 pp = Excelente, 5-10 pp = Bom, > 10 pp = Precisa melhorar")

print("\nüîç Cross Entropy:")
print("  ‚Ä¢ Mede a diverg√™ncia entre distribui√ß√µes reais e previstas")
print("  ‚Ä¢ Quanto menor, mais similares as distribui√ß√µes")
print("  ‚Ä¢ Interpreta√ß√£o: < 0.1 = Excelente, 0.1-0.3 = Bom, > 0.3 = Precisa melhorar")

print("\nüîç KL Divergence:")
print("  ‚Ä¢ Mede a diverg√™ncia de Kullback-Leibler entre distribui√ß√µes")
print("  ‚Ä¢ Quanto menor, mais similares as distribui√ß√µes")
print("  ‚Ä¢ Interpreta√ß√£o: < 0.1 = Excelente, 0.1-0.3 = Bom, > 0.3 = Precisa melhorar")

# COMMAND ----------

# MAGIC %md
# MAGIC ## 12. Recomenda√ß√µes de Uso
# MAGIC
# MAGIC Apresentamos recomenda√ß√µes para o uso efetivo das m√©tricas.

# COMMAND ----------

print("üí° RECOMENDA√á√ïES DE USO:")
print("=" * 50)

print("\n1Ô∏è‚É£ **Monitoramento Cont√≠nuo**:")
print("  ‚Ä¢ Calcule as m√©tricas regularmente (mensal/trimestral)")
print("  ‚Ä¢ Acompanhe a evolu√ß√£o ao longo do tempo")
print("  ‚Ä¢ Identifique tend√™ncias de melhoria ou deteriora√ß√£o")

print("\n2Ô∏è‚É£ **An√°lise por Segmento**:")
print("  ‚Ä¢ Analise m√©tricas por CD, g√™meo, regi√£o")
print("  ‚Ä¢ Identifique padr√µes e outliers")
print("  ‚Ä¢ Foque esfor√ßos de melhoria nos segmentos com pior performance")

print("\n3Ô∏è‚É£ **Compara√ß√£o de Abordagens**:")
print("  ‚Ä¢ Compare diferentes m√©todos de c√°lculo de demanda")
print("  ‚Ä¢ Avalie qual abordagem gera melhores resultados")
print("  ‚Ä¢ Use as m√©tricas para otimizar par√¢metros")

print("\n4Ô∏è‚É£ **A√ß√µes Corretivas**:")
print("  ‚Ä¢ Use as m√©tricas para identificar problemas espec√≠ficos")
print("  ‚Ä¢ Implemente melhorias baseadas nos resultados")
print("  ‚Ä¢ Monitore o impacto das mudan√ßas implementadas")

# COMMAND ----------

# MAGIC %md
# MAGIC ## 13. Conclus√£o
# MAGIC
# MAGIC Este notebook demonstrou o uso pr√°tico das fun√ß√µes de m√©tricas para avalia√ß√£o
# MAGIC da matriz de merecimento, fornecendo ferramentas robustas para an√°lise de qualidade.

# COMMAND ----------

print("‚úÖ EXEMPLO DE USO DAS M√âTRICAS CONCLU√çDO!")
print("=" * 50)
print("\nüìä Fun√ß√µes demonstradas:")
print("  ‚Ä¢ add_allocation_metrics(): M√©tricas agregadas")
print("  ‚Ä¢ calculate_line_metrics(): M√©tricas linha a linha")
print("  ‚Ä¢ validate_metrics_data(): Valida√ß√£o de dados")
print("  ‚Ä¢ generate_metrics_summary(): Resumo estat√≠stico")
print("  ‚Ä¢ compare_metrics_periods(): Compara√ß√£o entre per√≠odos")

print("\nüéØ Pr√≥ximos passos:")
print("  ‚Ä¢ Aplique as m√©tricas aos dados reais da matriz de merecimento")
print("  ‚Ä¢ Implemente monitoramento cont√≠nuo das m√©tricas")
print("  ‚Ä¢ Use os resultados para otimiza√ß√£o da matriz")
print("  ‚Ä¢ Compartilhe insights com stakeholders relevantes")
