# Databricks notebook source
# MAGIC %md
# MAGIC # C√°lculo da Matriz de Merecimento - Detec√ß√£o Autom√°tica de Meses At√≠picos
# MAGIC
# MAGIC Este notebook implementa o c√°lculo da matriz de merecimento com detec√ß√£o autom√°tica
# MAGIC de meses at√≠picos usando regra anal√≠tica baseada em estat√≠sticas robustas.
# MAGIC
# MAGIC **Objetivo**: Calcular a matriz de merecimento otimizada removendo meses com comportamento
# MAGIC at√≠pico que podem distorcer as aloca√ß√µes.
# MAGIC
# MAGIC **Metodologia de Detec√ß√£o de Outliers**:
# MAGIC - **Regra dos 3 Desvios**: Remove meses com QtMercadoria > 3œÉ da m√©dia
# MAGIC - **C√°lculo por G√™meo**: Estat√≠sticas calculadas individualmente para cada grupo de produtos similares
# MAGIC - **Valida√ß√£o Autom√°tica**: Identifica e reporta meses removidos com justificativa estat√≠stica

# COMMAND ----------

# MAGIC %md
# MAGIC ## 1. Imports e Configura√ß√µes Iniciais

# COMMAND ----------

from pyspark.sql import SparkSession, DataFrame
from pyspark.sql import functions as F, Window
from datetime import datetime, timedelta
import pandas as pd
from typing import List, Optional

# Inicializa√ß√£o do Spark
spark = SparkSession.builder.appName("calculo_matriz_merecimento").getOrCreate()

# COMMAND ----------

# MAGIC %md
# MAGIC ## 2. Carregamento dos Dados Base
# MAGIC
# MAGIC %md
# MAGIC Carregamos a base de dados de vendas e estoque para produtos de telefonia celular,
# MAGIC que ser√° utilizada para o c√°lculo da matriz de merecimento.

# COMMAND ----------

df_vendas_estoque_telefonia = (
    spark.table('databox.bcg_comum.supply_base_merecimento_diario')
    .filter(F.col("NmAgrupamentoDiretoriaSetor") == 'DIRETORIA TELEFONIA CELULAR')
    .filter(F.col("DtAtual") >= "2024-01-01")
    .withColumn(
        "year_month",
        F.date_format(F.col("DtAtual"), "yyyyMM").cast("int")
    )
    .fillna(0, subset=["Receita", "QtMercadoria", "TeveVenda"])
)
df_vendas_estoque_telefonia.cache()

print("‚úÖ Dados de vendas e estoque de telefonia carregados:")
print(f"üìä Total de registros: {df_vendas_estoque_telefonia.count():,}")
print(f"üìÖ Per√≠odo: {df_vendas_estoque_telefonia.agg(F.min('DtAtual'), F.max('DtAtual')).collect()[0]}")

df_vendas_estoque_telefonia.limit(1).display()

# COMMAND ----------

# MAGIC %md
# MAGIC ## 3. Carregamento dos Mapeamentos de Produtos
# MAGIC
# MAGIC %md
# MAGIC Carregamos os arquivos de mapeamento que relacionam SKUs com modelos, 
# MAGIC esp√©cies gerenciais e grupos de produtos similares ("g√™meos").

# COMMAND ----------

# Mapeamento de modelos e tecnologia
de_para_modelos_tecnologia = (
    pd.read_csv('dados_analise/MODELOS_AJUSTE (1).csv', 
                delimiter=';')
    .drop_duplicates()
)

# Normaliza√ß√£o de nomes de colunas
de_para_modelos_tecnologia.columns = (
    de_para_modelos_tecnologia.columns
    .str.strip()            # remove leading/trailing spaces
    .str.lower()            # lowercase
    .str.replace(r"[^\w]+", "_", regex=True)  # non-alphanumeric -> "_"
    .str.strip("_")         # remove leading/trailing underscores
)

# Mapeamento de produtos similares (g√™meos)
de_para_gemeos_tecnologia = (
    pd.read_csv('dados_analise/ITENS_GEMEOS 2.csv',
                delimiter=";",
                encoding='iso-8859-1')
    .drop_duplicates()
)

# Normaliza√ß√£o de nomes de colunas
de_para_gemeos_tecnologia.columns = (
    de_para_gemeos_tecnologia
    .columns
    .str.strip()            # remove leading/trailing spaces
    .str.lower()            # lowercase
    .str.replace(r"[^\w]+", "_", regex=True)  # non-alphanumeric -> "_"
    .str.strip("_")         # remove leading/trailing underscores
)

# Renomea√ß√£o e merge dos mapeamentos
de_para_modelos_tecnologia = (
    de_para_modelos_tecnologia.rename(columns={'codigo_item': 'sku_loja'})
)

de_para_modelos_gemeos_tecnologia = (
    spark.createDataFrame(
        pd.merge(
            de_para_modelos_tecnologia,
            de_para_gemeos_tecnologia,
            on='sku_loja',
            how="outer"
        )
        [['sku_loja', 'item', 'modelos', 'setor_gerencial', 'gemeos']]
        .drop_duplicates()
    )
    .withColumnRenamed("sku_loja", "CdSku")
)

print("‚úÖ Mapeamentos de produtos carregados:")
print(f"üì¶ Total de SKUs mapeados: {de_para_modelos_gemeos_tecnologia.count():,}")
print(f"üîÑ Total de grupos g√™meos: {de_para_modelos_gemeos_tecnologia.select('gemeos').distinct().count()}")

de_para_modelos_gemeos_tecnologia.limit(1).display()

# COMMAND ----------

# MAGIC %md
# MAGIC ## 4. Join dos Dados com Mapeamentos
# MAGIC
# MAGIC %md
# MAGIC Realizamos o join entre os dados de vendas/estoque e os mapeamentos
# MAGIC para obter uma base consolidada com informa√ß√µes de g√™meos.

# COMMAND ----------

df_vendas_estoque_telefonia_gemeos_modelos = (
    df_vendas_estoque_telefonia
    .join(
        de_para_modelos_gemeos_tecnologia,
        on=['CdSku'],
        how='left'
    )
    .fillna("SEM_GRUPO", subset=["gemeos"])
)

print("‚úÖ Dados consolidados com mapeamentos:")
print(f"üìä Total de registros ap√≥s join: {df_vendas_estoque_telefonia_gemeos_modelos.count():,}")

df_vendas_estoque_telefonia_gemeos_modelos.limit(1).display()

# COMMAND ----------

# MAGIC %md
# MAGIC ## 5. Detec√ß√£o Autom√°tica de Meses At√≠picos
# MAGIC
# MAGIC %md
# MAGIC Implementamos a regra anal√≠tica para detectar meses at√≠picos:
# MAGIC - **C√°lculo por G√™meo**: Estat√≠sticas calculadas individualmente para cada grupo de produtos similares
# MAGIC - **Regra dos n Desvios**: Remove meses com QtMercadoria > nœÉ da m√©dia
# MAGIC - **Valida√ß√£o Autom√°tica**: Identifica e reporta meses removidos com justificativa estat√≠stica

# COMMAND ----------

# MAGIC %md
# MAGIC ### 5.1 C√°lculo de Estat√≠sticas por G√™meo e M√™s
# MAGIC
# MAGIC %md
# MAGIC Calculamos as estat√≠sticas (m√©dia e desvio padr√£o) da quantidade de mercadoria
# MAGIC para cada grupo de produtos similares (g√™meos) por m√™s.

# COMMAND ----------

# Agrega√ß√£o por g√™meo e m√™s para c√°lculo de estat√≠sticas
df_stats_por_gemeo_mes = (
    df_vendas_estoque_telefonia_gemeos_modelos
    .groupBy("gemeos", "year_month")
    .agg(
        F.sum("QtMercadoria").alias("QtMercadoria_total"),
        F.countDistinct("CdFilial").alias("qtd_filiais"),
        F.countDistinct("CdSku").alias("qtd_skus")
    )
    .filter(F.col("QtMercadoria_total") > 0)  # Remove meses sem vendas
)

print("üìä Estat√≠sticas calculadas por g√™meo e m√™s:")
print(f"üìà Total de registros: {df_stats_por_gemeo_mes.count():,}")

df_stats_por_gemeo_mes.limit(5).display()

# COMMAND ----------

# MAGIC %md
# MAGIC ### 5.2 C√°lculo de M√©dia e Desvio Padr√£o por G√™meo
# MAGIC
# MAGIC %md
# MAGIC Calculamos a m√©dia e desvio padr√£o da quantidade de mercadoria para cada g√™meo,
# MAGIC considerando todos os meses dispon√≠veis.

# COMMAND ----------

n_desvios = 2

# Janela para c√°lculo de estat√≠sticas por g√™meo
w_stats_gemeo = Window.partitionBy("gemeos")

# C√°lculo de m√©dia e desvio padr√£o por g√™meo
df_stats_gemeo = (
    df_stats_por_gemeo_mes
    .withColumn(
        "media_qt_mercadoria",
        F.avg("QtMercadoria_total").over(w_stats_gemeo)
    )
    .withColumn(
        "desvio_padrao_qt_mercadoria",
        F.stddev("QtMercadoria_total").over(w_stats_gemeo)
    )
    .withColumn(
        "limite_superior_nsigma",
        F.col("media_qt_mercadoria") + (F.lit(n_desvios) * F.col("desvio_padrao_qt_mercadoria"))
    )
    .withColumn(
        "limite_inferior_nsigma",
        F.greatest(
            F.col("media_qt_mercadoria") - (F.lit(n_desvios) * F.col("desvio_padrao_qt_mercadoria")),
            F.lit(0)  # N√£o permite valores negativos
        )
    )
    .withColumn(
        "flag_mes_atipico",
        F.when(
            (F.col("QtMercadoria_total") > F.col("limite_superior_nsigma")) |
            (F.col("QtMercadoria_total") < F.col("limite_inferior_nsigma")),
            F.lit(1)
        ).otherwise(F.lit(0))
    )
)

print("üìä Estat√≠sticas calculadas por g√™meo:")
print(f"üìà Total de registros: {df_stats_gemeo.count():,}")

# Mostrar estat√≠sticas para alguns g√™meos
df_stats_gemeo.orderBy("gemeos", "year_month").limit(10).display()

# COMMAND ----------

# MAGIC %md
# MAGIC ### 5.3 Identifica√ß√£o de Meses At√≠picos
# MAGIC
# MAGIC %md
# MAGIC Identificamos os meses que ser√£o removidos por serem considerados at√≠picos
# MAGIC segundo a regra dos n desvios padr√£o.

# COMMAND ----------

# Meses identificados como at√≠picos
df_meses_atipicos = (
    df_stats_gemeo
    .filter(F.col("flag_mes_atipico") == 1)
    .select(
        "gemeos",
        "year_month",
        F.round("QtMercadoria_total", 2).alias("QtMercadoria_total"),
        F.round("media_qt_mercadoria", 2).alias("media_qt_mercadoria"),
        F.round("desvio_padrao_qt_mercadoria", 2).alias("desvio_padrao_qt_mercadoria"),
        F.round("limite_superior_nsigma", 2).alias("limite_superior_nsigma"),
        F.round("limite_inferior_nsigma", 2).alias("limite_inferior_nsigma"),
        "flag_mes_atipico"
    )
    .orderBy("gemeos", "year_month")
)

print("‚ö†Ô∏è MESES IDENTIFICADOS COMO AT√çPICOS:")
print("=" * 80)
print(f"üìä Total de meses at√≠picos: {df_meses_atipicos.count():,}")

if df_meses_atipicos.count() > 0:
    print("\nüîç Detalhamento dos meses at√≠picos:")
    df_meses_atipicos.display()
else:
    print("‚úÖ Nenhum m√™s at√≠pico foi identificado!")

# COMMAND ----------

# MAGIC %md
# MAGIC ### 5.4 Resumo Estat√≠stico por G√™meo
# MAGIC
# MAGIC %md
# MAGIC Apresentamos um resumo estat√≠stico mostrando quantos meses foram identificados
# MAGIC como at√≠picos para cada grupo de produtos similares.

# COMMAND ----------

# Resumo estat√≠stico por g√™meo
df_resumo_atipicos_gemeo = (
    df_stats_gemeo
    .groupBy("gemeos")
    .agg(
        F.count("*").alias("total_meses"),
        F.sum("flag_mes_atipico").alias("meses_atipicos"),
        F.round(F.avg("media_qt_mercadoria"), 2).alias("media_qt_mercadoria"),
        F.round(F.avg("desvio_padrao_qt_mercadoria"), 2).alias("desvio_padrao_qt_mercadoria")
    )
    .withColumn(
        "percentual_meses_atipicos",
        F.round(F.col("meses_atipicos") / F.col("total_meses") * 100, 2)
    )
    .orderBy(F.desc("meses_atipicos"))
)

print("üìã RESUMO ESTAT√çSTICO POR G√äMEO:")
print("=" * 80)
df_resumo_atipicos_gemeo.display()

# COMMAND ----------

de_para_filial_cd = (
    spark.table('databox.bcg_comum.supply_base_merecimento_diario')
    .select("CdFilial", "Cd_primario")
    .distinct()
    .dropna()
)


# COMMAND ----------

# MAGIC %md
# MAGIC ## 11. C√°lculo de Demanda por M√©dias M√≥veis (Sem Ruptura)
# MAGIC
# MAGIC %md
# MAGIC Calculamos a demanda usando m√©dias m√≥veis de 90, 120 e 360 dias,
# MAGIC considerando apenas dias que n√£o tiveram ruptura (com estoque).
# MAGIC
# MAGIC **Metodologia:**
# MAGIC - **Filtro de Ruptura**: Apenas dias com estoque > 0
# MAGIC - **M√©dias M√≥veis**: 90, 120 e 360 dias
# MAGIC - **N√≠vel SKU-Loja**: C√°lculo individual por produto e filial
# MAGIC - **Agrega√ß√£o por G√™meo**: Consolida√ß√£o para c√°lculo de percentuais

# COMMAND ----------

# MAGIC %md
# MAGIC ### 11.1 Prepara√ß√£o dos Dados para C√°lculo de M√©dias M√≥veis
# MAGIC
# MAGIC %md
# MAGIC Preparamos os dados filtrados para c√°lculo das m√©dias m√≥veis,
# MAGIC aplicando filtros de ruptura e organizando por SKU e loja.

# COMMAND ----------

# Prepara√ß√£o dos dados para c√°lculo de m√©dias m√≥veis
df_dados_medias_moveis = (
    df_vendas_estoque_telefonia_filtrado
    .filter(F.col("EstoqueLoja") > 0)  # Apenas dias sem ruptura (com estoque)
    .select(
        "DtAtual",
        "CdSku",
        "CdFilial",
        "gemeos",
        "QtMercadoria",
        "Receita",
        "EstoqueLoja"
    )
    .withColumn(
        "DtAtual_date",
        F.to_date("DtAtual")
    )
    .withColumn(
        "DayIdx",
        F.datediff(F.col("DtAtual_date"), F.lit("1970-01-01"))
    )
    .orderBy("gemeos", "CdFilial", "DayIdx")
)

print("‚úÖ Dados preparados para c√°lculo de m√©dias m√≥veis:")
print(f"üìä Total de registros (sem ruptura): {df_dados_medias_moveis.count():,}")
print(f"üìÖ Per√≠odo: {df_dados_medias_moveis.agg(F.min('DtAtual'), F.max('DtAtual')).collect()[0]}")

df_dados_medias_moveis.limit(5).display()

# COMMAND ----------

# MAGIC %md
# MAGIC ### 11.2 C√°lculo de M√©dias M√≥veis por SKU-Loja
# MAGIC
# MAGIC %md
# MAGIC Calculamos as m√©dias m√≥veis de 90, 120 e 360 dias para cada
# MAGIC combina√ß√£o de SKU e loja, considerando apenas dias sem ruptura.

# COMMAND ----------

# Janelas para diferentes per√≠odos de m√©dia m√≥vel
w_90 = Window.partitionBy("gemeos", "CdFilial").orderBy("DayIdx").rangeBetween(-89, 0)
w_120 = Window.partitionBy("CdSku", "CdFilial").orderBy("DayIdx").rangeBetween(-119, 0)
w_360 = Window.partitionBy("CdSku", "CdFilial").orderBy("DayIdx").rangeBetween(-359, 0)

# C√°lculo das m√©dias m√≥veis
df_medias_moveis_sku_loja = (
    df_dados_medias_moveis
    .withColumn(
        "Media90_Qt_venda_estq",
        F.avg("QtMercadoria").over(w_90)
    )
    .withColumn(
        "Media120_Qt_venda_estq",
        F.avg("QtMercadoria").over(w_120)
    )
    .withColumn(
        "Media360_Qt_venda_estq",
        F.avg("QtMercadoria").over(w_360)
    )
    .withColumn(
        "Media90_Receita",
        F.avg("Receita").over(w_90)
    )
    .withColumn(
        "Media120_Receita",
        F.avg("Receita").over(w_120)
    )
    .withColumn(
        "Media360_Receita",
        F.avg("Receita").over(w_360)
    )
    .fillna(0, subset=[
        "Media90_Qt_venda_estq", "Media120_Qt_venda_estq", "Media360_Qt_venda_estq",
        "Media90_Receita", "Media120_Receita", "Media360_Receita"
    ])
)

print("‚úÖ M√©dias m√≥veis calculadas por SKU-Loja:")
print(f"üìä Total de registros: {df_medias_moveis_sku_loja.count():,}")

# Mostrar exemplo das m√©dias calculadas
df_medias_moveis_sku_loja.orderBy("CdSku", "CdFilial", "DtAtual").limit(10).display()

# COMMAND ----------

# MAGIC %md
# MAGIC ### 11.3 Agrega√ß√£o por G√™meo para C√°lculo de Percentuais
# MAGIC
# MAGIC %md
# MAGIC Agregamos os dados por g√™meo para calcular os percentuais de merecimento,
# MAGIC consolidando as informa√ß√µes de SKUs similares.

# COMMAND ----------

# Agrega√ß√£o por g√™meo, filial e m√™s
df_agregado_gemeo_filial = (
    df_medias_moveis_sku_loja
    .groupBy("gemeos", "CdFilial", "year_month")
    .agg(
        F.sum("QtMercadoria").alias("QtMercadoria_total"),
        F.sum("Receita").alias("Receita_total"),
        F.round(F.avg("Media90_Qt_venda_estq"), 2).alias("Media90_Qt_venda_estq"),
        F.round(F.avg("Media120_Qt_venda_estq"), 2).alias("Media120_Qt_venda_estq"),
        F.round(F.avg("Media360_Qt_venda_estq"), 2).alias("Media360_Qt_venda_estq"),
        F.round(F.avg("Media90_Receita"), 2).alias("Media90_Receita"),
        F.round(F.avg("Media120_Receita"), 2).alias("Media120_Receita"),
        F.round(F.avg("Media360_Receita"), 2).alias("Media360_Receita"),
        F.countDistinct("CdSku").alias("qtd_skus_gemeo")
    )
    .filter(F.col("QtMercadoria_total") > 0)  # Remove registros sem vendas
)

print("‚úÖ Dados agregados por g√™meo e filial:")
print(f"üìä Total de registros agregados: {df_agregado_gemeo_filial.count():,}")

df_agregado_gemeo_filial.limit(5).display()

# COMMAND ----------

# MAGIC %md
# MAGIC ### 11.4 C√°lculo de Percentuais de Merecimento
# MAGIC
# MAGIC %md
# MAGIC Calculamos os percentuais de merecimento por g√™meo e filial,
# MAGIC usando as m√©dias m√≥veis calculadas para distribuir as aloca√ß√µes.

# COMMAND ----------

# Janela para c√°lculo de totais por g√™meo e m√™s
w_gemeo_mes = Window.partitionBy("gemeos", "year_month")

# C√°lculo de percentuais de merecimento
df_percentuais_merecimento = (
    df_agregado_gemeo_filial
    # Totais por g√™meo e m√™s
    .withColumn("total_qt_mercadoria_gemeo_mes", F.sum("QtMercadoria_total").over(w_gemeo_mes))
    .withColumn("total_receita_gemeo_mes", F.sum("Receita_total").over(w_gemeo_mes))
    .withColumn("total_media90_demanda_gemeo_mes", F.sum("Media90_Qt_venda_estq").over(w_gemeo_mes))
    .withColumn("total_media120_demanda_gemeo_mes", F.sum("Media120_Qt_venda_estq").over(w_gemeo_mes))
    .withColumn("total_media360_demanda_gemeo_mes", F.sum("Media360_Qt_venda_estq").over(w_gemeo_mes))
    
    # Percentuais baseados em diferentes m√©dias m√≥veis
    .withColumn(
        "pct_merecimento_media90",
        F.when(F.col("total_media90_demanda_gemeo_mes") > 0,
               F.col("Media90_Qt_venda_estq") / F.col("total_media90_demanda_gemeo_mes"))
         .otherwise(F.lit(0.0))
    )
    .withColumn(
        "pct_merecimento_media120",
        F.when(F.col("total_media120_demanda_gemeo_mes") > 0,
               F.col("Media120_Qt_venda_estq") / F.col("total_media120_demanda_gemeo_mes"))
         .otherwise(F.lit(0.0))
    )
    .withColumn(
        "pct_merecimento_media360",
        F.when(F.col("total_media360_demanda_gemeo_mes") > 0,
               F.col("Media360_Qt_venda_estq") / F.col("total_media360_demanda_gemeo_mes"))
         .otherwise(F.lit(0.0))
    )
    
    # Percentuais em %
    .withColumn("pct_merecimento_media90_perc", F.round(F.col("pct_merecimento_media90") * 100, 4))
    .withColumn("pct_merecimento_media120_perc", F.round(F.col("pct_merecimento_media120") * 100, 4))
    .withColumn("pct_merecimento_media360_perc", F.round(F.col("pct_merecimento_media360") * 100, 4))
    
    # Sele√ß√£o das colunas finais
    .select(
        "year_month", "gemeos", "CdFilial",
        "QtMercadoria_total", "Receita_total",
        "Media90_Qt_venda_estq", "Media120_Qt_venda_estq", "Media360_Qt_venda_estq",
        "Media90_Receita", "Media120_Receita", "Media360_Receita",
        "total_qt_mercadoria_gemeo_mes", "total_receita_gemeo_mes",
        "total_media90_demanda_gemeo_mes", "total_media120_demanda_gemeo_mes", "total_media360_demanda_gemeo_mes",
        "pct_merecimento_media90", "pct_merecimento_media90_perc",
        "pct_merecimento_media120", "pct_merecimento_media120_perc",
        "pct_merecimento_media360", "pct_merecimento_media360_perc",
        "qtd_skus_gemeo"
    )
)

print("‚úÖ Percentuais de merecimento calculados:")
print(f"üìä Total de registros: {df_percentuais_merecimento.count():,}")

# Mostrar exemplo dos percentuais calculados
df_percentuais_merecimento.orderBy("gemeos", "CdFilial", "year_month").limit(10).display()

# COMMAND ----------

# MAGIC %md
# MAGIC ### 11.5 Resumo das M√©dias M√≥veis por G√™meo
# MAGIC
# MAGIC %md
# MAGIC Apresentamos um resumo das m√©dias m√≥veis calculadas por g√™meo,
# MAGIC mostrando a distribui√ß√£o da demanda entre diferentes per√≠odos.

# COMMAND ----------

# Resumo das m√©dias m√≥veis por g√™meo
df_resumo_medias_moveis_gemeo = (
    df_percentuais_merecimento
    .groupBy("gemeos")
    .agg(
        F.count("*").alias("total_registros"),
        F.countDistinct("CdFilial").alias("total_filiais"),
        F.countDistinct("year_month").alias("total_meses"),
        F.round(F.avg("Media90_Qt_venda_estq"), 2).alias("media90_media"),
        F.round(F.avg("Media120_Qt_venda_estq"), 2).alias("media120_media"),
        F.round(F.avg("Media360_Qt_venda_estq"), 2).alias("media360_media"),
        F.round(F.avg("pct_merecimento_media90_perc"), 4).alias("pct_merecimento_90_medio"),
        F.round(F.avg("pct_merecimento_media120_perc"), 4).alias("pct_merecimento_120_medio"),
        F.round(F.avg("pct_merecimento_media360_perc"), 4).alias("pct_merecimento_360_medio")
    )
    .orderBy("gemeos")
)

print("üìã RESUMO DAS M√âDIAS M√ìVEIS POR G√äMEO:")
print("=" * 80)
df_resumo_medias_moveis_gemeo.display()

# COMMAND ----------

# MAGIC %md
# MAGIC ### 11.6 Compara√ß√£o entre Diferentes Per√≠odos de M√©dia M√≥vel
# MAGIC
# MAGIC %md
# MAGIC Analisamos as diferen√ßas entre os percentuais calculados usando
# MAGIC diferentes per√≠odos de m√©dia m√≥vel para identificar a melhor abordagem.

# COMMAND ----------

# An√°lise comparativa das m√©dias m√≥veis
df_comparacao_medias = (
    df_percentuais_merecimento
    .withColumn(
        "diff_90_120",
        F.abs(F.col("pct_merecimento_media90_perc") - F.col("pct_merecimento_media120_perc"))
    )
    .withColumn(
        "diff_90_360",
        F.abs(F.col("pct_merecimento_media90_perc") - F.col("pct_merecimento_media360_perc"))
    )
    .withColumn(
        "diff_120_360",
        F.abs(F.col("pct_merecimento_media120_perc") - F.col("pct_merecimento_media360_perc"))
    )
    .select(
        "gemeos", "CdFilial", "year_month",
        "pct_merecimento_media90_perc", "pct_merecimento_media120_perc", "pct_merecimento_media360_perc",
        F.round("diff_90_120", 4).alias("diff_90_120"),
        F.round("diff_90_360", 4).alias("diff_90_360"),
        F.round("diff_120_360", 4).alias("diff_120_360")
    )
)

print("üìä COMPARA√á√ÉO ENTRE DIFERENTES PER√çODOS DE M√âDIA M√ìVEL:")
print("=" * 80)
print(f"üìà Total de registros para compara√ß√£o: {df_comparacao_medias.count():,}")

# Estat√≠sticas das diferen√ßas
stats_diferencas = df_comparacao_medias.agg(
    F.round(F.avg("diff_90_120"), 4).alias("media_diff_90_120"),
    F.round(F.avg("diff_90_360"), 4).alias("media_diff_90_360"),
    F.round(F.avg("diff_120_360"), 4).alias("media_diff_120_360"),
    F.round(F.stddev("diff_90_120"), 4).alias("std_diff_90_120"),
    F.round(F.stddev("diff_90_360"), 4).alias("std_diff_90_360"),
    F.round(F.stddev("diff_120_360"), 4).alias("std_diff_120_360")
).collect()[0]

print(f"\nüìä ESTAT√çSTICAS DAS DIFEREN√áAS:")
print(f"  ‚Ä¢ M√©dia diferen√ßa 90-120 dias: {stats_diferencas['media_diff_90_120']}%")
print(f"  ‚Ä¢ M√©dia diferen√ßa 90-360 dias: {stats_diferencas['media_diff_90_360']}%")
print(f"  ‚Ä¢ M√©dia diferen√ßa 120-360 dias: {stats_diferencas['media_diff_120_360']}%")

# Mostrar exemplos das compara√ß√µes
df_comparacao_medias.orderBy("gemeos", "CdFilial", "year_month").limit(10).display()

# COMMAND ----------

# MAGIC %md
# MAGIC ## 12. Resumo Final - Matriz de Merecimento Calculada
# MAGIC
# MAGIC %md
# MAGIC A matriz de merecimento foi calculada com sucesso usando m√©dias m√≥veis
# MAGIC de diferentes per√≠odos, considerando apenas dias sem ruptura.

# COMMAND ----------

# Estat√≠sticas finais
total_gemeos = df_percentuais_merecimento.select("gemeos").distinct().count()
total_filiais = df_percentuais_merecimento.select("CdFilial").distinct().count()
total_meses = df_percentuais_merecimento.select("year_month").distinct().count()

print("üéØ MATRIZ DE MERECIMENTO CALCULADA COM SUCESSO!")
print("=" * 80)

print(f"\nüìä COBERTURA DA MATRIZ:")
print(f"  ‚Ä¢ Total de grupos g√™meos: {total_gemeos}")
print(f"  ‚Ä¢ Total de filiais: {total_filiais}")
print(f"  ‚Ä¢ Total de meses: {total_meses}")
print(f"  ‚Ä¢ Total de combina√ß√µes g√™meo-filial-m√™s: {df_percentuais_merecimento.count():,}")

print(f"\nüìà M√âDIAS M√ìVEIS CALCULADAS:")
print(f"  ‚Ä¢ 90 dias: Demanda de curto prazo")
print(f"  ‚Ä¢ 120 dias: Demanda de m√©dio prazo")
print(f"  ‚Ä¢ 360 dias: Demanda de longo prazo")

print(f"\n‚úÖ CARACTER√çSTICAS DA IMPLEMENTA√á√ÉO:")
print(f"  ‚Ä¢ Filtro de ruptura aplicado (apenas dias com estoque)")
print(f"  ‚Ä¢ C√°lculo por SKU-Loja individual")
print(f"  ‚Ä¢ Agrega√ß√£o por g√™meo para percentuais")
print(f"  ‚Ä¢ M√∫ltiplos per√≠odos de an√°lise")

print(f"\nüéØ PR√ìXIMOS PASSOS:")
print(f"  ‚Ä¢ Valida√ß√£o dos percentuais calculados")
print(f"  ‚Ä¢ Ajustes manuais se necess√°rio")
print(f"  ‚Ä¢ Exporta√ß√£o da matriz final")
print(f"  ‚Ä¢ Implementa√ß√£o no sistema")

print(f"\n‚úÖ Notebook de c√°lculo da matriz de merecimento conclu√≠do!")
print(f"üéØ Matriz pronta para uso com percentuais baseados em m√©dias m√≥veis!")


